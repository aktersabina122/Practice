Exam Preparation : 


GenericServlet class
GenericServlet class
Methods of GenericServlet class
Example of GenericServlet class
GenericServlet class implements Servlet, ServletConfig and Serializable interfaces. It provides the implementation of all the methods of these interfaces except the service method.

GenericServlet class can handle any type of request so it is protocol-independent.

You may create a generic servlet by inheriting the GenericServlet class and providing the implementation of the service method.

public class First extends GenericServlet{  
public void service(ServletRequest req,ServletResponse res)  
throws IOException,ServletException{  
  
res.setContentType("text/html");  
  
PrintWriter out=res.getWriter();  
out.print("<html><body>");  
out.print("<b>hello generic servlet</b>");  
out.print("</body></html>");  
}  

public void init(ServletConfig config){  
this.config=config;  
System.out.println("servlet is initialized");  
}  
  


ServletConfig cfg=getServletConfig();

ServletContext ctx=getServletContext();

Redirecting to page : 


RequestDispatcher rd=request.getRequestDispatcher("servlet2");  
rd.forward(request, response);

response.sendRedirect("http://www.javatpoint.com");  



InitParameter Example : 
________________________

<servlet>  
<servlet-name>DemoServlet</servlet-name>  
<servlet-class>DemoServlet</servlet-class>  
  
<init-param>  
<param-name>driver</param-name>  
<param-value>sun.jdbc.odbc.JdbcOdbcDriver</param-value>  
</init-param>  
  
</servlet>  
  
<servlet-mapping>  
<servlet-name>DemoServlet</servlet-name>  
<url-pattern>/servlet1</url-pattern>  
</servlet-mapping>  
  
ContextParameter Example : 
___________________________

<web-app>  
  
<servlet>  
<servlet-name>sonoojaiswal</servlet-name>  
<servlet-class>DemoServlet</servlet-class>  
</servlet>  
  
<context-param>  
<param-name>dname</param-name>  
<param-value>sun.jdbc.odbc.JdbcOdbcDriver</param-value>  
</context-param>  
  
<servlet-mapping>  
<servlet-name>sonoojaiswal</servlet-name>  
<url-pattern>/context</url-pattern>  
</servlet-mapping>  
  
</web-app>  


Cookie Example : 
_________________


Cookie ck=new Cookie("user","665");//deleting value of cookie  
ck.setMaxAge(0);//changing the maximum age to 0 seconds  
response.addCookie(ck);//adding cookie in the response  


Cookie ck[]=request.getCookies();  
for(int i=0;i<ck.length;i++){  
 out.print("<br>"+ck[i].getName()+" "+ck[i].getValue());//printing name and value of cookie  
}  


FilterMethod Syntax : 
_____________________

public class MyFilter implements Filter{  
  
public void init(FilterConfig arg0) throws ServletException {}  
      
public void doFilter(ServletRequest req, ServletResponse resp,  
    FilterChain chain) throws IOException, ServletException {  
          
    PrintWriter out=resp.getWriter();  
    out.print("filter is invoked before");  
          
    chain.doFilter(req, resp);//sends request to next resource  
          
    out.print("filter is invoked after");  
    }  
    public void destroy() {}  


Configure Filter in XML file 
_____________________________


<filter>  
<filter-name>f1</filter-name>  
<filter-class>MyFilter</filter-class>  
</filter>  
   
<filter-mapping>  
<filter-name>f1</filter-name>  
<url-pattern>/servlet1</url-pattern>  
</filter-mapping>  

JSP Expression Language :
_________________________

Value is ${ sessionScope.user }  
Welcome, ${ param.user }  
Welcome, ${ param.password }  

Value is ${ sessionScope.user }  

JSP scriptlet tag
A scriptlet tag is used to execute java source code in JSP. Syntax is as follows:

<%  java source code %>  


Syntax of JSP expression tag
<%=  statement %>  

Syntax of JSP declaration tag
The syntax of the declaration tag is as follows:

<%!  field or method declaration %> 

Add JSP comment using the <%-- --%> tags.

JSP Implicit Objects
JSP Implicit Objects
out implicit object
Example of out implicit object
There are 9 jsp implicit objects. These objects are created by the web container that are available to all the jsp pages.

The available implicit objects are out, request, config, session, application etc.

A list of the 9 implicit objects is given below:

Object	Type
out	JspWriter
request	HttpServletRequest
response	HttpServletResponse
config	ServletConfig
application	ServletContext
session	HttpSession
pageContext	PageContext
page	Object
exception	Throwable

<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>  

<%@ taglib uri="http://java.sun.com/jsp/jstl/xml" prefix="x" %>  

JSTL XML tags List
XML Tags	Descriptions
x:out	Similar to <%= ... > tag, but for XPath expressions.
x:parse	It is used for parse the XML data specified either in the tag body or an attribute.
x:set	It is used to sets a variable to the value of an XPath expression.
x:choose	It is a conditional tag that establish a context for mutually exclusive conditional operations.
x:when	It is a subtag of that will include its body if the condition evaluated be 'true'.
x:otherwise	It is subtag of that follows tags and runs only if all the prior conditions evaluated be 'false'.
x:if	It is used for evaluating the test XPath expression and if it is true, it will processes its body content.
x:transform	It is used in a XML document for providing the XSL(Extensible Stylesheet Language) transformation.
x:param	It is used along with the transform tag for setting the parameter in the XSLT style sheet.









































