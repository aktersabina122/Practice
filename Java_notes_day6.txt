super : If you want to pass values from derived class to base class, then we need the help of super keyword. 

It has 2 forms as 

	1) super as constructor

	2) super as keyword

Abstract class : A class that which can be created, but not implemented and instantiated known as abstract class, abstract class contains both abstract and non-abstract methods, abstract methods needs to be overrided mandetorily by the derived class. 

You cannot create an object to abstract class. 

It will have indirect objects. 

interfaces : Java does not support the concept of multiple inheriatance, to achieve this we need the help of interfaces. An interface contains method declaration and the implementation can be done in the corresponding class, you can add more than one interface to the particular class. 

syntax :

interface interface_name {
 method(s);
}


You can add an interface to the class as

class class_name implements interface_name {

}

Difference between interface and abstract class 
_______________________________________________

   -> Abstract class contains both abstract and non-abstract methods,
	where interface contains only abstract methods. 

   -> interace methods are public and abstract by default. 

   -> Multiple inheritance can be achieved by using interfaces.

   -> An interface can be called from anywhere to anywhere. 

Exception Handling : 
_____________________

	It is a mechanism of handling the runtime errors during execution of the program. There are 2 types of errors known as

	1) Compile Time
	2) Runtime

To handle errors, we have 3 blocks as 

	1) try block : This block contains statements in which there is possibility of getting runtime errors, the statements which are placed in this block are treated as heavy weighted statements as JVM allocates excess memory to them. 

	2) catch block : Once exception raised in try block, then the control will be forwarded to catch block, this block contains alternative statements for exceptions raised in try block. One try block can contains multiple catch blocks. 


	3) finally block : This block contains statements that needs to be executed mandetorily irrespective of try and catch blocks, this block is not mandetory, but all the statements which are placed in this block are executed as mandetory statements. 

Exception is the top level class from which all kinds of exceptions
are derived. 

There are 2 types of exceptions known as 

	(i) Checked Exceptions : These are the exceptions that which occurs at compile time, during compilation JVM feels some erroneous code is there and stops the execution at compile time, can be handled at method level by using throws keyword. 

	(ii) Unchecked Exceptions : These are the exceptions that which occurs at run time and can be handled by using try...catch block. 


    throw keyword : If you want to throw exceptions (system/custom) based on condition, then we need the help of throw keyword. 

	Here, we need to throw the exception object. 



   You can create custom exceptions by using Exception class, any class that which derived from Exception can be treated as Custom Exception. 

class CustomException extends Exception {
      CustomException(String error) {
           super(error);
      }
}


Write a program as accept email (string), and check its valid email or not 

    1) if '@' not found then throw InvalidEmailException

    2) if length of username not betwen 5 to 12 chars then throw
		InvalidUserException

    else print email address

Files : 
________

  A file is a collection of data, that which allows you to store the output permanently. To deal with files, we need the help of java.io package. 

File class : This class allows you to access a file, and display the properties of the file. 



FileReader : Allows you to read data from the file wrt unicode format. 

FileReader fr=new FileReader(fileobj);

read() : used to read data char/char and returns ascii value, it returns -1 once it reaches the EOF.


FileWriter : Allows you to write data into the file. 

FileWriter fw=new FileWriter(file);

write(): used to write data char/char. 






































































